An Introduction to OpenLayers
Tim Sutton
Last Updated: %%mtime(%A %B %d, %Y)

%! target    : tex
%! style    : style.css
%! Options   : --toc --toc-level 1 --enum-title --css-sugar --css-inside
%! preproc   : TUT_URL  https://qgis.org
%! PostProc(html): '(?i)(<pre>)' '<div class="code">\1'
%! PostProc(html): '(?i)(</pre>)' '\1</div>'
%
% Tex processing
%
% Make sure this is first
%! PostProc(tex): '\\includegraphics' '\\includegraphics[width=100mm]'
% scartcl is from the koma script document class (apt-get install texlive-latex-recommended ttf-komatuna)
% setlength parindent suppresses first line of paragraph idents
% parskip puts blank space between paragraphs
% title pic stuff used to put a logo on the front page
%! PostProc(tex): '\\documentclass{article}' '\\documentclass{scrartcl}\n\\setlength{\\parindent}{0pt}\n\\setlength{\\parskip}{2ex}'
% use the color table and table packages so we can pimp the tables a little
%! PostProc(tex): '\\usepackage{style.css}  % user defined' '\\usepackage{fancyvrb}\n\\usepackage{colortbl} \n\\usepackage [table]{xcolor}\n\\definecolor{tableShade}{HTML}{cecece}\n\\definecolor{linfiniti-blue}{HTML}{0079FC}\n\\usepackage{wallpaper}\n\\LRCornerWallPaper{1}{WALLPAPER-IMAGE}\n\\usepackage{hyperref}\n\\hypersetup{linkcolor=linfiniti-blue,urlcolor=linfiniti-blue}\\renewcommand\\thesection{\\color{linfiniti-blue}\\thechapter\\arabic{section}}'
% Make the header row of tables have a dark background. light text
%! PostProc(tex): '\\hline \\textbf' '\\hline \\rowcolor[rgb]{0,0,0} \\color{white} \\textbf'
%! PostProc(tex): '& \\textbf' '& \\color{white} \\textbf'
% Make verbatim text a little smaller and use fancyvrb package to draw it in a box
% Note Verbatim with capital V for fancyvrb to work
%! PostProc(tex): '\\begin{verbatim}' '{\\scriptsize\\begin{Verbatim}[frame=single,rulecolor=\\color{linfiniti-blue}, framesep=4mm, label=\\fbox{\\small\\emph{Listing}}]'
%! PostProc(tex): '\\end{verbatim}' '\\end{Verbatim}\n}'
%! PostProc(tex): '\\section' '\\newpage\\section'
%! PostProc(tex): 'section{' 'section{\\color{linfiniti-blue}'
%! PostProc(tex): NEWPAGE '\\newpage'
% Give alternating table rows different colours and use a smaller font in tables (\tiny)
%! PostProc(tex): '\\begin{tabular}' '\\rowcolors{2}{tableShade}{white} \n\\tiny\\begin{tabular}'
%fix turning single quote into apostrophe
%%! PostProc(tex): "'" "\\math(\\prime)" 
%! encoding: iso-8859-1

%! PostProc(tex): WALLPAPER-IMAGE '../resources/linfiniti-footer.png'
% These are comments and will not be generated in any output
% -------------------

%This document is in text2tags format. You can generate html, plain text and
%moinmoin formatted documentation by running txt2tags on this document. See the
%txt2tags home page for more details. Please insert manual line breaks in this
%document as it makes diffing for changes much easier. To do this in vim
%automatically, select a section then issue (gq) command. Please dont
%apply vim formatting to the whole document as it screws up some formatting
%rather apply it selectively to paragraphs where needed.

% To generate the text version of this document:
% txt2tags -t txt -o index index.t2t
% To generate the moinmoin version of this document
% txt2tags -t moin -o index.moin index.t2t
% To generate the html version of this document
% txt2tags -t html -o index.html index.t2t
% To generate a LaTeX / pdf
% txt2tags -t tex -o index.tex index.t2t; pdflatex index.tex


%--------------------------------------------

= An Introduction to OpenLayers =

In this workshop I will introduce you to the [OpenLayers http://openlayers.org]
javascript library. OpenLayers is a client side (it runs in your browser)
library that can fetch and display geospatial data from various sources,
including WMS and WFS, GeoRSS, Google maps, Bing maps and so on.

In order to enjoy this tutorial, you will probably need to know a little bit
about HTML and JavaScript, although I have tried to keep the examples
approachable to those who have little or no knowledge of these two standards.

== Getting Ready ==

Before you start, you should have completed my Mapserver workshop (so that you
have some local WMS sources available), or you need to have a working internet
connection available. The first thing you need to do is to create a working
directory and download and unpack OpenLayers into it. A copy of OpenLayers is
provided on our resource cd, otherwise, fetch a copy from
http://openlayers.org.

So let's make a working dir and unpack OpenLayers into it:

```
mkdir ol
tar xfz installers/generic_installers/OpenLayers-2.10.tar.gz
mv OpenLayers-2.10/ openlayers
```

The last command is just for convenience so this tutorial remains current even
if you are using a newer version of OpenLayers.

I would also strongly recommend that you use firefox for your work and install
the 'firebug' developer extension to it. It will let us debug our pages if they
have any errors.

== Make your first map! ==

We are going to make the 'hello world' equivalent for OpenLayers - a simple map
that displays data from a WMS resource.

First I will provide the complete listing:

```
<html>
  <head>
    <title>Tim's Map</title>
    <link rel="stylesheet" href="openlayers/theme/default/style.css" type="text/css" />
    <style>
      #map-id {
        width: 512px;
        height: 512px;
      }
    </style>
    <script src="openlayers/lib/OpenLayers.js"></script>
  </head>
  <body>
    <h1>The world according to Tim</h1>
    <div id="map-id"></div>
    <script>
      var map = new OpenLayers.Map("map-id");
      var imagery = new OpenLayers.Layer.WMS(
        "Country",
        "http://196.35.94.243/cgi-bin/mapserv?map=ZA_SPOT10m2010",
        {layers: "Spot5_RSA_2010_10m", format : "image/jpeg"}
        // Or with our own map:
        //"http://localhost/cgi-bin/mapserv?map=/home/web/mapserver/mapfiles/world.map",
        //{layers: "Country,Cities", format : "image/png; mode=24bit"}
      );
      map.addLayer(imagery);
      map.zoomToMaxExtent();
    </script>
  </body>
</html>

```


OK, so let's try to understand what is going on here - I will break it down line
by line:

``<html>`` - All html pages must start with this tag - it says "I'm starting my
page now". Similarly, you will see that the page ends with ``</html>`` - which
means "I'm ending my page now". All tags that you open in html must be balanced
by closing them again.

``<head>`` - Each html page can have a header section where you can declare
various page properties and include other files such as javascript files, style
sheets and so on. Notice once again that the ``</head>`` closes the header
section.

``<title>Tim's Map</title>`` - This is the title for the page. It will appear
in the top of the browser window. It is nested within the header section.

``<link rel="stylesheet" href="openlayers/theme/default/style.css"
type="text/css" />`` - Here I am referencing an //external// style sheet. In
this case it is one that ships with OpenLayers and provides the default theme
for OpenLayers.

```
<style>
   #map-id {
     width: 512px;
     height: 512px;
   }
</style>
```

This is an //inline// style sheet. It defines the height and width for an
element whose id is 'map-id'. We will create a 'div' block level element
further down to hold our OpenLayers map and call it map-id, so this line is
essentially just saying how big the map must be on the page.

``<script src="openlayers/lib/OpenLayers.js"></script>`` - Now we are including
an external javascript library. In this case the OpenLayers library. Doing this
brings in all the logic needed for us to be able to add OpenLayers mapping
functionality to our page.

``<body>`` and ``</body>`` Mark the start and end of the user visible part of
the page. Everything that follows will be part of the actual rendered web page.

``<h1>The world according to Tim</h1>`` - This is just a heading written to the
page in 'h1' (largest) heading style.

``<div id="map-id"></div>`` - Remember further up we set the style for a map-id
element? This is where it is defined. Because of its style definition in the
header, it will occupy 512px x 512px space on the page underneath the heading.

``<script>`` - Here I am inlining another piece of javascript within the web
page. It will run as the page loads.

``var map = new OpenLayers.Map("map-id");`` - This line is javascript. It
declares a new OpenLayers map variable and passes it our map-id div as a
parameter. The net result of doing that will be for OpenLayers to insert a map
into the //map-id// div element.

``var imagery = new OpenLayers.Layer.WMS(`` - Now that we have a map, the next
thing we do is to create a layer. You can see that it is a WMS layer. The open
bracket at the end of the line indicates that we will be passing the layer
constructor a bunch of options - which follow below.

``"Country",`` - This is the first option to the layer constructor. It tells
OpenLayers to set the display name for this layer to //Country//.
``"http://196.35.94.243/cgi-bin/mapserv?map=ZA_SPOT10m2010",`` - This is the
second option. It is a url to the WMS resource that should be displayed.
``{layers: "Spot5_RSA_2010_10m", format : "image/jpeg"}`` - This last option is
actually a list of 'sub' options. The first indicates which layers from the WMS
resource should be displayed. The second indicates which image format to use
for the retrieved WMS layer. The image format you can use depends on the WMS
 resource.
``);`` - This finalises the list of options for the WMS layer definition.

``map.addLayer(imagery);`` - Now that we have defined a layer, we tell
OpenLayers to add it to our map!

``map.zoomToMaxExtent();`` - Lastly, we tell OpenLayers to zoom the map to the
maximum extent of all the layers.

If you save and load this page in your browser, you should see something like
the image below.

 | [img/image01.jpeg]


== Bing! ==

You can add Bing maps to OpenLayers in a similar way to adding WMS data. In
this example we will continue to use Geographic projection and make a few
improvements to the way in which we set up the map:

```
<html>
  <head>
    <title>Tims Map</title>
    <link rel="stylesheet" href="openlayers/theme/default/style.css" type="text/css">
    <style>
      #map-id {
        width: 512px;
        height: 512px;
      }
    </style>
    <script src="openlayers/OpenLayers.js"></script>
    <script src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.2&mkt=en-us"></script>

    <script>
     var map;
     function init(){
      // Example based on: http://openlayers.org/dev/examples/bing.html
      // setting restrictedExtent so that we can use the 
      // VirtualEarth-layers, see e.g. 
      // http://dev.openlayers.org/apidocs/files/OpenLayers/Layer/VirtualEarth-js.html
      var restrictedExtent = new OpenLayers.Bounds(-180, -90, 180, 90);
      map = new OpenLayers.Map("map-id");
      map.addControl(new OpenLayers.Control.LayerSwitcher());
      var shaded = new OpenLayers.Layer.VirtualEarth("Shaded", {
        type: VEMapStyle.Shaded
      });
      var hybrid = new OpenLayers.Layer.VirtualEarth("Hybrid", {
        type: VEMapStyle.Hybrid
      });
      var aerial = new OpenLayers.Layer.VirtualEarth("Aerial", {
        type: VEMapStyle.Aerial
      });
      map.addLayers([shaded, hybrid, aerial]);
      map.setCenter(new OpenLayers.LonLat(-110, 45), 3);
     }
    </script>
  </head>
  <body onload="init()">
    <h1>The world according to Tim</h1>
    <div id="map-id"></div>
  </body>
</html>

```


Let's do a line by line analysis again:

```
<script src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.2&mkt=en-us"></script>
```

The first thing we have done is to include the developer library for virtual
earth. This is needed to display VE layers.

```
    <script>
     var map;
     function init(){
```

OK, so this is a little different to before. We have moved the javascript part
that was previously embedded directly in our web page //<body>// into the
head area. We put all the javascript code into a function called //init// which we
will run when the page is initially loaded (by calling the onload event from
the start of the body block).

The ```var map;``` line just initialises a variable and makes its scope global
(since it is defined outside of any function).

```
map = new OpenLayers.Map("map-id");
```

This is just as before - we setup our map, telling it to place itself inside
the //map-id// div.

```
map.addControl(new OpenLayers.Control.LayerSwitcher());
```

Now we are doing something new. I am telling the map to add a layerswitcher
control. The layerswitcher will appear on the edge of the map as a small "+"
symbol. When you click on it, you can select between the layers that have been
added to the map. In the case of //baselayers// only one can be active at any
time, so they are listed with radio buttons next to them. In the case of
//overlays// each can be toggled on or off independently, so they are listed
with checkboxes next to them.

```
      var shaded = new OpenLayers.Layer.VirtualEarth("Shaded", {
        type: VEMapStyle.Shaded
      });
      var hybrid = new OpenLayers.Layer.VirtualEarth("Hybrid", {
        type: VEMapStyle.Hybrid
      });
      var aerial = new OpenLayers.Layer.VirtualEarth("Aerial", {
        type: VEMapStyle.Aerial
      });
```

In this section, we define a bunch of VE layers. These are predefined by
Microsoft, but otherwise the procedure is much the same as with our previous
example.

```
      map.addLayers([shaded, hybrid, aerial]);
```

Before we used //addLayer()//, which adds a single layer to the map. If you
have multiple layers, it is quicker to add them all in one go by passing the
addLayers method an array of layers.

```
      map.setCenter(new OpenLayers.LonLat(-110, 45), 3);
     }
    </script>
  </head>
```

Like before, I have centered the map using setCenter, and then I end my
//function// (closing the '}'), the //<script>// block and finally the
//<head>// block.

```
  <body onload="init()">
```

Since we have moved our script from being inline, to being declared in a script
block in the head section of the page, we need to call it some how. We do that
by adding the ```onload="init()"``` option to the body tag. When the body of
the page has loaded, it will then call our new init function.

```
    <h1>The world according to Tim</h1>
    <div id="map-id"></div>
  </body>
```

The actual body contents are much the same as before with a notable exception -
the body no longer contains an inlined //<script>// block (as discussed above).

OpenLayers supports various other types of layers that can be added to the map,
including google maps, yahoo maps, OpenStreetMaps (which we will try just now),
WFS, GML and others. The procedure for adding each type varies a little, but
the principle is the same - create a map and add some layers to it.

== Controlling the map using javascript ==

=== A button to zoom to a place ===

The nice thing about openlayers is that once a map is loaded in your page, you
can control that map using javascript. For example we could add a little button
before the ``</body>`` terminator tag like this:

```
<input type="button" onclick="map.setCenter(new OpenLayers.LonLat(25,-24), 7 );" 
    value="Go To Your House" />
```

``<input type="button" value="Go To Your House" />`` - This is html notation
to place a button on the page with the text for the button specified by the
label option.

The //onclick// event of this button has been programmed with some mapserver
api calls. Let's break them down one at a time:

```map.setCenter()``` - Tells the openlayers map that we want to recenter it on a
new point. This function takes two parameters - a coordinate and a zoom level.
```new OpenLayers.LonLat(25,-24)``` - Creates a new LonLat object - the point
position to which we will be zooming. Note that openlayers calls any coordinate
pair 'lonlat' - even if it is in a projected coordinate reference system.
```7``` - This is the zoom level to use when panning. By default openlayers has
16 zoom levels with 0 representing the smallest scale and 16 the largest.


**Now You try:** Add a new layer to the map (use google to find the url of a
wms layer if you don't have one handy.

If you have enabled firebug (and have enabled the jscript console), you can play
around with the map interactively. For example, try these:

```
>>> map.setCenter(map.center,3)
>>> map.setCenter(map.center,8)
```

=== Showing and hiding layers ===

You can do many other things with the map api - here is how you might hide and
show the first layer in the map.

```
>>> map.layers[0].setVisibility(false)
>>> map.layers[0].setVisibility(true)
```

Recent versions of firebug will 'intellisense complete' your javascript as you
type. See if you can figure out some other ways to manipulate the map.


=== Set center based on user input ===

Let's try an example where the user gets to decide where to recenter the map to:

Because everything is just html and javascript, you can create user interfaces
to allow the user to interact with the map in other ways. In this example we
add two input boxes (``input type ="text"``) and a button. When the user clicks
the button, the values entered in the input boxes will be used in a call to
//map.setCenter()//.

```
<label for="lon">Lon</label><input type="text" id="lon" />
<label for="lat">Lat</label><input type="text" id="lat" />


<input type="button" onclick="
map.setCenter(
 new OpenLayers.LonLat(
  document.getElementById('lon').value,
  document.getElementById('lat').value));
  " value="Go!" /
 >
``` 
== Working with data in other Coordinate Reference Systems (CRS) ==

In the first section we saw that it is easy to use WMS services with
openlayers. There are other map sources you can use too. In this example, we
will show you how to add an [open street map http://openstreetmap.org] dataset
to your map. The OpenStreetmap project publish their data in the Google
Mercator projection, so we need to do a little work to set up the map
projection before we can add the layer.


```
<html>
  <head>
    <title>Tims Map</title>
    <link rel="stylesheet" href="openlayers/theme/default/style.css" type="text/css">
    <style>
      #map-id {
        width: 512px;
        height: 512px;
      }
    </style>
    <script src="openlayers/OpenLayers.js"></script>
    <script>
      var map;
      var geographic;
      var mercator;
      function init(){
        geographic = new OpenLayers.Projection("EPSG:4326");
        mercator = new OpenLayers.Projection("EPSG:900913");

        var world = new OpenLayers.Bounds(-180, -89, 180, 89).transform(
          geographic, mercator
        );

        var options = {
          projection: mercator,
          units: "m",
          maxExtent: world
        };
        var map = new OpenLayers.Map("map-id", options);

        var osm = new OpenLayers.Layer.OSM();
        map.addLayer(osm);


        var gabs = new OpenLayers.LonLat(25,-24).transform(
          geographic, mercator
        );
        map.setCenter(gabs, 9);
      } //end of init
    </script>
  </head>
  <body onload="init()">
    <h1>The world according to Tim</h1>
    <div id="map-id"></div>
  </body>
</html>
```


Let's look in detail at the changes we have made to our project:

Once again we have our script to initialise the map in the <head> section.  Our
updated script starts off with these three lines:

``` 
 var map;
 var geographic;
 var mercator;
```

These declare some global variables as we will use then elsewhere on the page.

```
function init() {
  var geographic = new OpenLayers.Projection("EPSG:4326");
  var mercator = new OpenLayers.Projection("EPSG:900913");
```

What we are doing is defining to //Projection// objects - one based on
'Geographic' (EPSG:4326) and one based on 'Google Mercator' (EPSG:900913). We
will use these to calculate the dimensions of the bounding box for the map and
if we need to do any other conversions between Geographic/Lat Lon and Google
Mercator.

```
  var world = new OpenLayers.Bounds(-180, -89, 180, 89).transform(
    geographic, mercator
  );
```

Now we have defined the bounding box for the world by //transform//ing a
rectangle described in Geographic into a rectangle described in meters using
the Google Mercator projection.

```
  var options = {
   projection: mercator,
   units: "m",
   maxExtent: world
  };
```

The code above defines a variable 'options' and initialises it with an array of
map options. We will pass this options list as a parameter to openlayers when
we construct the map. You can see a [full list of options http://dev.openlayers.org/docs/files/OpenLayers/Map-js.html] 
by reading the openlayers api documentation. In our case, we are telling the map
that its projection will be 'mercator', map units will be in meters and the
maximum extent for the map will be the world rectangle which we calculated in
the previous step.

```
  var map = new OpenLayers.Map("map-id", options);
```

This is the same as our first example, except now we have added the options
parameter which is passed to the map when it is created.

```
  var osm = new OpenLayers.Layer.OSM();
  map.addLayer(osm);
```

Here we use the built in function to create a new OpenStreetMap (OSM) layer,
and then add it to the map.

```
  var gabs = new OpenLayers.LonLat(25,-24).transform(
   geographic, mercator
  );
```

In this step we define a LatLon object (somewhere near Gabarone). Because the
map is in EPSG:900913, we need to first reproject the LonLat coordinates for
Gabarone to Google Mercator, in a similar way to the bounding box transform we
carried out higher up.

```
  map.setCenter(gabs, 9);
```

Finally we can set the map center to Gabarone with a zoom level of 9.


Load your page and have a play around with it.

**Now you try:** Update the map so that it zooms to your house when it first loads.

**Question:** What do we need to do to make our zoom to place buttons work now?

=== Dealing with projections in your scripts ===

The above example page set up some projection objects. These can then be 
used within your scripts for transforming data when needed.

```
<label for="lon">Lon</label><input type="text" id="lon" />
<label for="lat">Lat</label><input type="text" id="lat" />
<input type="button" onclick="
 map.setCenter(
 new OpenLayers.LonLat(
  document.getElementById('lon').value,
  document.getElementById('lat').value
 ).transform(geographic, mercator), 14 );
 " value="Go!" /
>
```

You will notice that we seamlessly transform the user's coordinates from
EPSG:4326 to EPSG:900913 and then center the map on that.

== Working with vector data. ==

The examples in the previous sections all dealt with raster layers. In this
part of the tutorial we will look at vector data a little. OpenLayers can
render vector data into the map area for points, lines, polygons and symbols
with variouse styles and options. One thing I should mention before we start is
that you should be careful of trying to load massive vector datasets -
javascript performance will start to degrade substantially after around 500
features have been loaded (depending on their complexity), so if you are
dealing with large vector datasets you should think about strategies to avoid
this e.g.:

- rendering on the server side and delivering via wms
- subsetting your data based on scale
- aggregating your data where objects are in close proximity to each other.
-

=== A GeoRSS Layer ===

GeoRSS is an extension of RSS (Really Simple Sindication) and allows an xml rss
source to describe geospatial information for each record in the feed. Lets
take a look at a simple snippet:

```
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:georss="http://www.georss.org/georss">
  <updated>2010-11-30T09:44:09Z</updated>
  <title>USGS M2.5+ Earthquakes</title>
  <subtitle>Real-time, worldwide earthquake list for the past day</subtitle>
  <link rel="self" href="http://earthquake.usgs.gov/earthquakes/catalogs/1day-M2.5.xml"/>
  <link href="http://earthquake.usgs.gov/earthquakes/"/>
  <author><name>U.S. Geological Survey</name></author>
  <id>http://earthquake.usgs.gov/</id>
  <icon>/favicon.ico</icon>
  <entry>
    <id>urn:earthquake-usgs-gov:nc:71490320</id>
    <title>M 3.3, Northern California</title>
    <updated>2010-11-30T09:25:53Z</updated>
    <link rel="alternate" type="text/html" 
      href="http://earthquake.usgs.gov/earthquakes/recenteqsww/Quakes/nc71490320.php"/>
    <summary type="html">
    <![CDATA[<img src="http://earthquake.usgs.gov/images/globes/40_-120.jpg" 
    alt="40.288&#176;N 121.193&#176;W" align="left" hspace="20" />
    <p>Tuesday, November 30, 2010 09:25:53 UTC<br>
    Tuesday, November 30, 2010 01:25:53 AM at epicenter</p>
    <p><strong>Depth</strong>: 2.60 km (1.62 mi)</p>]]>
    </summary>
    <georss:point>40.2880 -121.1932</georss:point>
    <georss:elev>-2600</georss:elev>
    <category label="Age" term="Past hour"/>
  </entry>
```

The feed xml contains first some descriptive data about the feed and then a
series of one or more //entry// blocks. The important thing for our purposes is
that the entry contains a //georss::point// property - something we can map!

Lets see how we might add such a feed to our map:

```
<html>
  <head>
    <title>My Map</title>
    <link rel="stylesheet" href="openlayers/theme/default/style.css" type="text/css">
    <style>
      #map-id {
        width: 512px;
        height: 256px;
      }
    </style>
    <script src="openlayers/OpenLayers.js"></script>
    <script>
     var map;
     function init() {
      map = new OpenLayers.Map("map-id");

      var country = new OpenLayers.Layer.WMS(
        //"Country",
        //"http://196.35.94.243/cgi-bin/mapserv?map=ZA_SPOT10m2010",
        //{layers: "Country", format : "image/jpeg"}
        "Country",
        "http://localhost/cgi-bin/mapserv?map=/home/web/mapserver/mapfiles/world.map",
        {layers: "Country", format : "image/png; mode=24bit"}
      );
      map.addLayer(country);
      var feedlayer = new OpenLayers.Layer.GeoRSS( 'GeoRSS', 'earthquakes-feed.xml');
      map.addLayer(feedlayer);
      map.zoomToMaxExtent();
     }
    </script>
  </head>
  <body onload="init()">
    <h1>My Map</h1>
    <div id="map-id"></div>
  </body>
</html>
```

The map is pretty much the same as our very first example, except it adds a 
second layer:

```
var feedlayer = new OpenLayers.Layer.GeoRSS( 'GeoRSS', 'earthquakes-feed.xml');
map.addLayer(feedlayer);
```

The resulting map should look like this:

 | [img/rss-map.png]

=== Adding JSON Features ===

JSON (Javascript Simple Object Notation) is a lightweight (compared to xml)
format for passing data between applications. With JSON you can define a
geometry in a simple plain text notation. Here is an example of adding a json
layer to our map:

```            
 var format = new OpenLayers.Format.GeoJSON();
 var layer = new OpenLayers.Layer.Vector("Search Area");
 var feature = format.read({ 
   "type": "Polygon", 
   "coordinates": 
   [ 
     [ 
        [ 21.005863, -31.252288 ], 
        [ 23.422855, -29.163706 ], 
        [ 24.433597, -31.589797 ], 
        [ 22.324222, -32.557957 ], 
        [ 21.005863, -31.252288 ] 
     ] 
   ] })[0];
 layer.addFeatures(feature);
 map.addLayer(layer);
```

Lets work through what we did - step by step:

- The process starts with creating a new format reader. OpenLayers provides
  various format readers that know how to parse vector geometry definitions. In
  this case we are using the GeoJSON format reader. 
- Next we create a new 'empty' vector layer.
- Then we create a new feature be reading it from a GeoJSON string. 
- That feature is then added to the layer.
- Finally, the layer is added to the map.
-

Here is what the result looks like:

 | [img/geojson.png]


=== Adding simple features ===

If the above examples were too complicated for you, maybe you will like this one:

```
var myPoint = new OpenLayers.Geometry.Point(24.0,-29.0);
var myPointFeature = new OpenLayers.Feature.Vector(myPoint)
var pointlayer = new OpenLayers.Layer.Vector("Points");
pointlayer.addFeatures([myPointFeature]);
map.addLayer(pointlayer);
```

In this case we did:

- create a new point geometry object using the //geometry// factory.
- create a new feature from the geometry using the //feature// factory.
- create a new point //layer// object.
- add our feature to the layer.
- add the layer to the map.
-

Hopefully that was easy for you! Here is what the output should look like:

 | [img/simple-point.png]


== Custom vector styles ==

You may have noticed in our vector examples that the selection of colours used
was not exactly scintillating - orange, orange or more orange about sums it up.
Fortunately, OpenLayers allows us to control the style for a vector layer.

=== Polygon styles ===

Let's tweak that polygon we drew earlier from GeoJSON. The first thing I need
to do is define my style:

```
// Let's get a custom style setup...
var myLayerStyle = OpenLayers.Util.extend({}, 
       OpenLayers.Feature.Vector.style['default']);
myLayerStyle.fillOpacity = 0.5;
myLayerStyle.fillColor = "black";
myLayerStyle.strokeColor = "blue";
myLayerStyle.strokeWidth = 3;
stylemap = new OpenLayers.StyleMap(myLayerStyle);

var format = new OpenLayers.Format.GeoJSON();

// and then apply it to the layer...
var layer = new OpenLayers.Layer.Vector("Search Area",{styleMap: stylemap} );
```

Lets walk through what we did:

- I first define a new style object. I assign it that standard layer style to
  begin with and then I will simply update some of its properties. 
- The fill opacity is then set to half transparent (0 for full transparent).
- Then I set the fill colour to black (it will actually appear grayish due to
  its transparency.
- Then the outline colour is set,
- and the outline width.
- To assign a style to a layer, it must be first added to a style map. In
  advanced usage of OpenLayers, you may define stylemaps that render features
  with different colours based on their attributes. In our example we are
  keeping things simple, so one style  will be used for all features, but it
  still needs to be placed in a style map before it can be used by the layer.
- In the last line, I have altered the constructor for the layer, so that the
  stylemap is passed to it.
-

Lets have a look at the output:

 | [img/polystyle.png]

=== Point styles ===

We can use a similar technique to define a style for our points:

```
var myBlueStyle = OpenLayers.Util.extend({}, myLayerStyle);
myBlueStyle.pointRadius = 10;
myBlueStyle.fillColor = "blue";
myBlueStyle.graphicName = "star";
myBlueStyle.pointRadius = 10;
myBlueStyle.strokeWidth = 1;

myBlueStyle.rotation = 45;
myBlueStyle.strokeLinecap = "butt";            
      
stylemap2 = new OpenLayers.StyleMap(myBlueStyle);
var pointlayer = new OpenLayers.Layer.Vector("Points", {styleMap: stylemap2});
```

The approach is the same, but in this case I used the //myLayerStyle// I
defined in the previous example as the starting point for my point style and
then overrode its properties. This is just to illustrate that if you are
creating many styles with some common properties, there is no need to redefine
all properties each time.

Once the point style properties are defined, the style is once again added to a
style map and then assigned to the stylemap property of our layer when it is
created.

If you followed along, your map should now looks something like this:

 | [img/pointstyle.png]

== Further Customisation ==

There are other things you can do beyond just adding layers and setting their
style in order to customise your map.

=== Adding a layer selector ===

You can add a layer selector as we have seen earlier in our bing maps example.
Lets add one to our current map:

```
map.addControl(new OpenLayers.Control.LayerSwitcher());
```

The layerswitcher will appear on the edge of the map as a small "+" symbol.
When you click on it, you can select between the layers that have been added to
the map. In the case of //baselayers// only one can be active at any time, so
they are listed with radio buttons next to them. In the case of
//overlays// each can be toggled on or off independently, so they are listed
with checkboxes next to them.


 | [img/layerselector.png]

=== Adding a scale bar ===

It is also possible to add a scale bar. First add to the init function:

```
  var scaleline = new OpenLayers.Control.ScaleLine({
    div: document.getElementById("scaleline-id")
  });
  map.addControl(scaleline); 
```

Then add to the body section of your html (after the map-id):

```
 <div id="scaleline-id"></div>
```

I got a little fancy here, adding the scale bar to a div element outside the
map. In order to do that, I needed to define the div element. Here is how our 
scalebar looks:


 | [img/scalebar.png]

=== Styling your scale bar ===

Most parts of OpenLayers can be styled using CSS. We can simple add some style directives in the //<style>// we defined. The original looked like this (it is where we defined the map size):

```
    <style>
      #map-id {
        width: 512px;
        height: 256px;
      }
    </style>
```

By adding a couple of rules, we can change the scalebars look (you need to understand CSS for this):

```
    <style>
      #map-id {
        width: 512px;
        height: 256px;
      }
      #scaleline-id {
        font-size: 8px;
        }
      .olControlScaleLineTop {
        background-color: red;
        border-color:green;
        }
    </style>
```

So our (now remarkably ugly) styled scalebar looks like this:

 | [img/scalebar-style.png]


=== Styling controls ===

The actual controls that you see on the map with OpenLayers can also be
customised. Here is a handy theme from the MapBox project that you can easily
apply. Just before you declare your map e.g.:

```
function init() {
  map = new OpenLayers.Map("map-id");
```

Add the //ImgPath// pointing to the mapbox theme:

```
function init() {
  OpenLayers.ImgPath = "http://js.mapbox.com/theme/dark/";
  map = new OpenLayers.Map("map-id");
```

Here's what the result should look like:

 | [img/mapcontrol-style.png]

== Heading off on your own ==

Well that brings us to the end of our primer on OpenLayers - you should have at
least an idea of what it is, what it can do and how to start creating your own
OpenLayers maps. An excellent resource to help you gain an even fuller picture
of what you can do with OpenLayers is the [OpenLayers Example Page
http://openlayers.org/dev/examples/].
